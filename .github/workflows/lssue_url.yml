name: 智能API内容获取

on:
  schedule:
    # 每4小时运行一次
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      target:
        description: '目标格式'
        required: false
        default: 'clash'
        type: choice
        options:
        - clash
        - v2ray
        - singbox
        - surge
        - loon
        - quanx
        - surfboard
      list:
        description: '是否返回列表'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  API_BASE_URL: "https://proxy-manager-ggeu.onrender.com/api/v1/subscribe"
  GITHUB_ISSUE_URL: "https://github.com/wzdnzd/aggregator/issues/91"
  SAVE_HISTORY: "false"   # 设置为 "true" 可保存历史版本（带时间戳）

jobs:
  fetch-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      metadata: read

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends curl jq

    - name: 爬取GitHub Issue获取最新配置
      id: scrape
      run: |
        echo "正在从GitHub Issue获取最新配置..."

        ISSUE_CONTENT=$(curl -s -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/wzdnzd/aggregator/issues/91")

        ISSUE_BODY=$(echo "$ISSUE_CONTENT" | jq -r '.body')

        echo "Issue内容获取成功"

        # 提取反引号中的内容，过滤长度为12-32位的token
        TOKEN=$(echo "$ISSUE_BODY" | grep -oP '`[a-zA-Z0-9]{12,32}`' | tr -d '`' | head -1)

        if [ -z "$TOKEN" ]; then
          TOKEN="l0b4i8i44u2kzlbh"
          echo "⚠️ 未能提取token，使用默认值: $TOKEN"
        else
          echo "✅ 成功提取token: $TOKEN"
        fi

        TARGET="${{ github.event.inputs.target || 'clash' }}"
        LIST="${{ github.event.inputs.list || 'false' }}"

        echo "token=$TOKEN" >> $GITHUB_OUTPUT
        echo "target=$TARGET" >> $GITHUB_OUTPUT
        echo "list=$LIST" >> $GITHUB_OUTPUT

        echo "使用参数: token=$TOKEN, target=$TARGET, list=$LIST"

        echo "$ISSUE_BODY" > issue_content.txt

    - name: 构建API链接并获取内容
      id: fetch
      run: |
        FULL_URL="${{ env.API_BASE_URL }}?token=${{ steps.scrape.outputs.token }}&target=${{ steps.scrape.outputs.target }}&list=${{ steps.scrape.outputs.list }}"
        echo "🔗 API链接: $FULL_URL"

        mkdir -p content logs

        echo "=== API请求信息 ===" > logs/request_log.txt
        echo "时间: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> logs/request_log.txt
        echo "Token: ${{ steps.scrape.outputs.token }}" >> logs/request_log.txt
        echo "Target: ${{ steps.scrape.outputs.target }}" >> logs/request_log.txt
        echo "List: ${{ steps.scrape.outputs.list }}" >> logs/request_log.txt
        echo "完整URL: $FULL_URL" >> logs/request_log.txt
        echo "" >> logs/request_log.txt

        echo "正在请求API..."
        RESPONSE=$(curl -s --retry 3 --retry-delay 5 \
          -w "HTTPSTATUS:%{http_code}\nTIME:%{time_total}" "$FULL_URL")

        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTPSTATUS:" | cut -d: -f2)
        TIME_TOTAL=$(echo "$RESPONSE" | grep "TIME:" | cut -d: -f2)
        CONTENT=$(echo "$RESPONSE" | sed '/HTTPSTATUS:/d' | sed '/TIME:/d')

        echo "HTTP状态码: $HTTP_CODE"
        echo "请求耗时: ${TIME_TOTAL}秒"

        echo "HTTP状态码: $HTTP_CODE" >> logs/request_log.txt
        echo "请求耗时: ${TIME_TOTAL}秒" >> logs/request_log.txt
        echo "响应长度: $(echo "$CONTENT" | wc -c)字节" >> logs/request_log.txt

        if [ "$HTTP_CODE" -eq 200 ]; then
          if [ "${{ env.SAVE_HISTORY }}" = "true" ]; then
            FILENAME="content/${{ steps.scrape.outputs.target }}_$(date '+%Y%m%d%H%M').txt"
          else
            FILENAME="content/${{ steps.scrape.outputs.target }}_config.txt"
          fi

          echo "$CONTENT" > "$FILENAME"

          echo "" >> "$FILENAME"
          echo "# ==================== 获取信息 ====================" >> "$FILENAME"
          echo "# 更新时间: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> "$FILENAME"
          echo "# Token: ${{ steps.scrape.outputs.token }}" >> "$FILENAME"
          echo "# 目标格式: ${{ steps.scrape.outputs.target }}" >> "$FILENAME"
          echo "# 列表模式: ${{ steps.scrape.outputs.list }}" >> "$FILENAME"
          echo "# API地址: ${{ env.API_BASE_URL }}" >> "$FILENAME"
          echo "# GitHub Issue: ${{ env.GITHUB_ISSUE_URL }}" >> "$FILENAME"
          echo "# 请求耗时: ${TIME_TOTAL}秒" >> "$FILENAME"
          echo "# =================================================" >> "$FILENAME"

          echo "✅ 内容获取成功，保存到: $FILENAME"
          echo "📊 文件大小: $(wc -c < "$FILENAME") 字节"

          echo "filename=$FILENAME" >> $GITHUB_ENV
          echo "success=true" >> $GITHUB_ENV
          echo "file_size=$(wc -c < "$FILENAME")" >> $GITHUB_ENV

          echo "✅ 请求成功" >> logs/request_log.txt
          echo "文件保存: $FILENAME" >> logs/request_log.txt
          echo "文件大小: $(wc -c < "$FILENAME") 字节" >> logs/request_log.txt
        else
          echo "❌ API请求失败，HTTP状态码: $HTTP_CODE"
          echo "响应内容: $CONTENT"
          echo "success=false" >> $GITHUB_ENV

          echo "❌ 请求失败" >> logs/request_log.txt
          echo "错误内容: $CONTENT" >> logs/request_log.txt

          exit 1
        fi

    - name: 验证内容质量
      if: env.success == 'true'
      run: |
        FILE="${{ env.filename }}"
        echo "🔍 验证内容质量..."

        SIZE=$(wc -c < "$FILE")
        if [ "$SIZE" -lt 100 ]; then
          echo "⚠️ 警告: 文件大小过小 ($SIZE 字节)，可能获取失败"
        else
          echo "✅ 文件大小正常: $SIZE 字节"
        fi

        case "${{ steps.scrape.outputs.target }}" in
          "clash")
            if grep -qE "proxies:|proxy-groups:" "$FILE"; then
              echo "✅ Clash配置格式验证通过"
            else
              echo "⚠️ Clash配置可能无效"
            fi
            ;;
          "v2ray")
            if grep -qE "outbounds|vmess://|vless://" "$FILE"; then
              echo "✅ V2Ray配置格式验证通过"
            else
              echo "⚠️ V2Ray配置可能无效"
            fi
            ;;
          *)
            echo "ℹ️ 跳过格式验证（格式: ${{ steps.scrape.outputs.target }}）"
            ;;
        esac

    - name: 提交更改
      if: env.success == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Actions Bot"

        git add content/ logs/ issue_content.txt

        if git diff --staged --quiet; then
          echo "📝 没有内容更改，跳过提交"
        else
          COMMIT_MSG="🤖 自动更新API内容 (${{ steps.scrape.outputs.target }}) - $(date '+%Y-%m-%d %H:%M:%S')"
          git commit -m "$COMMIT_MSG"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin HEAD:${{ github.ref_name }}
          echo "✅ 内容已更新并推送到仓库"
        fi

    - name: 输出最终结果
      if: always()
      run: |
        echo "==================== 执行结果 ===================="
        if [ "${{ env.success }}" = "true" ]; then
          echo "🎉 任务执行成功！"
          echo "📄 配置文件: ${{ env.filename }}"
          echo "📊 文件大小: ${{ env.file_size }} 字节"
          echo "🔑 使用Token: ${{ steps.scrape.outputs.token }}"
          echo "🎯 目标格式: ${{ steps.scrape.outputs.target }}"
          echo "📝 请求日志: logs/request_log.txt"
        else
          echo "❌ 任务执行失败"
          echo "🔍 请检查日志获取详细错误信息"
          echo "📝 请求日志: logs/request_log.txt"
        fi
        echo "================================================="
